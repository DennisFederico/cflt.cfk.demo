---
# KraftController
apiVersion: platform.confluent.io/v1beta1
kind: KRaftController
metadata:
  name: kraftcontroller
  namespace: confluent
  labels:
    component: kraft
spec:
  dataVolumeCapacity: 10G
  # storageClass:
  #   name: retain-sc
  image:
    application: confluentinc/cp-server:7.8.0
    init: confluentinc/confluent-init-container:2.10.0
  replicas: 3
  tls:
    autoGeneratedCerts: true
  listeners:
    controller:
      tls:
        enabled: true
      authentication:
        type: mtls
        principalMappingRules:
          - RULE:^CN=([a-zA-Z0-9.]*).*$/$1/
  authorization:
    type: rbac
    superUsers:
      - User:kafka
      - User:kraftcontroller
  dependencies:
    mdsKafkaCluster:
      bootstrapEndpoint: kafka.confluent.svc.cluster.local:9071
      authentication:
        type: mtls
        sslClientAuthentication: true
      tls:
        enabled: true

---
# Kafka
apiVersion: platform.confluent.io/v1beta1
kind: Kafka
metadata:
  name: kafka
  namespace: confluent
  labels:
    component: kafka
spec:
  dataVolumeCapacity: 250Gi
  # storageClass:
  #   name: retain-sc
  image:
    application: confluentinc/cp-server:7.8.0
    init: confluentinc/confluent-init-container:2.10.0
  replicas: 3
  configOverrides:
    log4j:
      # - log4j.logger.io.confluent.rest-utils=DEBUG, stdout
      # - log4j.additivity.io.confluent.rest-utils=false
      - log4j.logger.io.confluent.rbacapi=DEBUG, stdout
      - log4j.additivity.io.confluent.rbacapi=false
      - log4j.logger.io.confluent.tokenapi=DEBUG, stdout
      - log4j.additivity.io.confluent.tokenapi=false
      - log4j.logger.io.confluent.security.auth=DEBUG, stdout
      - log4j.additivity.io.confluent.security.auth=false
      # - log4j.logger.io.confluent.security.store=DEBUG, stdout
      # - log4j.additivity.io.confluent.security.store=false
      # - log4j.logger.io.confluent.common.security.jetty=DEBUG, stdout
      # - log4j.additivity.io.confluent.common.security.jetty=false
      # - log4j.logger.io.confluent.security.auth.provider.ldap=TRACE, stdout
    server:
      - auto.create.topics.enable=true
      - listener.name.external.oauthbearer.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required unsecuredLoginStringClaim_sub="thePrincipalName";
  tls:
    autoGeneratedCerts: true
  listeners:
    replication:
      tls:
        enabled: true
      authentication:
        type: mtls
        principalMappingRules:
          - RULE:^CN=([a-zA-Z0-9.]*).*$/$1/
    internal:
      tls:
        enabled: true
      authentication:
        type: mtls
        principalMappingRules:
          - RULE:^CN=([a-zA-Z0-9.]*).*$/$1/
    external:
      tls:
        enabled: true
      authentication:
        type: oauth
        # oauthSettings:
        #   groupsClaimName: groups
        #   subClaimName: client_id
        #   expectedIssuer: http://keycloak/realms/kafka-authbearer
        #   jwksEndpointUri: http://keycloak/realms/kafka-authbearer/protocol/openid-connect/certs
        #   tokenEndpointUri: http://keycloak/realms/kafka-authbearer/protocol/openid-connect/token
        oauthSettings:
          groupsClaimName: profile_groups
          subClaimName: azp
          expectedIssuer: http://keycloak/realms/sso_test
          jwksEndpointUri: http://keycloak/realms/sso_test/protocol/openid-connect/certs
          tokenEndpointUri: http://keycloak/realms/sso_test/protocol/openid-connect/token
      # authentication:
      #   type: mtls
      #   principalMappingRules:
      #     - RULE:^CN=([a-zA-Z0-9.]*).*$/$1/
      #     # - 'RULE:.*CN[\s]?=[\s]?([a-zA-Z0-9.]*)?.*/$1/'
      #   # For convenience Added the external SAN using the Operator
      #   # secretRef: external-kafka-tls
      externalAccess:
        type: loadBalancer
        # loadBalancer:
        #   domain: confluent.demo.com
        #   brokerPrefix: broker
        #   bootstrapPrefix: kafka
        loadBalancer:
          domain: confluent.demo.com
          brokerPrefix: brokeroauth
          bootstrapPrefix: kafkaoauth
    custom:
      - name: mtls
      # - name: keycloak
        port: 9093
        tls:
          enabled: true
        authentication:
          type: mtls
          principalMappingRules:
            - RULE:^CN=([a-zA-Z0-9.]*).*$/$1/
            # - 'RULE:.*CN[\s]?=[\s]?([a-zA-Z0-9.]*)?.*/$1/'
          # For convenience Added the external SAN using the Operator
          # secretRef: external-kafka-tls
        # authentication:
        #   type: oauth
        #   oauthSettings:
        #     groupsClaimName: groups
        #     subClaimName: client_id
        #     expectedIssuer: http://keycloak/realms/kafka-authbearer
        #     jwksEndpointUri: http://keycloak/realms/kafka-authbearer/protocol/openid-connect/certs
        #     tokenEndpointUri: http://keycloak/realms/kafka-authbearer/protocol/openid-connect/token
        externalAccess:
          type: loadBalancer
        #   loadBalancer:
        #     domain: confluent.demo.com
        #     brokerPrefix: brokeroauth
        #     bootstrapPrefix: kafkaoauth
          loadBalancer:
            domain: confluent.demo.com
            brokerPrefix: broker
            bootstrapPrefix: kafka
      # - name: intoauth
      #   port: 9094
      #   tls:
      #     enabled: true
      #   authentication:
      #     type: oauth
      #     oauthSettings:
      #       subClaimName: client_id
      #       expectedIssuer: http://keycloak/realms/sso_test
      #       jwksEndpointUri: http://keycloak/realms/sso_test/protocol/openid-connect/certs
      #       tokenEndpointUri: http://keycloak/realms/sso_test/protocol/openid-connect/token
  authorization:
    type: rbac
    superUsers:
      - User:kafka
      - User:kraftcontroller

  metricReporter:
    enabled: true
    tls:
      enabled: true
    authentication:
      type: mtls
  services:
    mds:
      tokenKeyPair:
        secretRef: mds-key-pair
      tls:
        enabled: true
      # authentication:
      #   type: bearer
      provider:
        ## BASICALLY FOR CONTROLCENTER AND OTHER BASIC (HTTP) CLIENTS WHEN USING mTLS
        file:
          secretRef: userstore-secret
        mtls:
          ## FOR KSQLDB?
          #sslClientAuthentication: required
          sslClientAuthentication: requested
          principalMappingRules:
            - RULE:^CN=([a-zA-Z0-9.]*).*$/$1/
        # oauth:
        #   configurations:
        #     subClaimName: client_id
        #     expectedIssuer: http://keycloak/realms/kafka-authbearer
        #     jwksEndpointUri: http://keycloak/realms/kafka-authbearer/protocol/openid-connect/certs
        #     tokenEndpointUri: http://keycloak/realms/kafka-authbearer/protocol/openid-connect/token
        oidc:
          clientCredentials:
            secretRef: oidc-creds
          configurations:
            groupsClaimName: profile_groups
            subClaimName: sub
            issuer: http://keycloak/realms/sso_test
            jwksEndpointUri: http://keycloak/realms/sso_test/protocol/openid-connect/certs
            authorizeBaseEndpointUri: http://keycloak/realms/sso_test/protocol/openid-connect/auth
            tokenBaseEndpointUri: http://keycloak/realms/sso_test/protocol/openid-connect/token
            refreshToken: false

      impersonation:
        # THIS IS REQUIRED FOR ANY USER THAT NEEDS "ADMIN" ACCESS TO ERP (i.e. krp)
        admins:
        - User:kafka
        - User:kraftcontroller
        - User:schemaregistry
        - User:connect
        - User:ksqldb
  dependencies:
    kRaftController:
      clusterRef:
        name: kraftcontroller
        namespace: confluent
      controllerListener:
        tls:
          enabled: true
        authentication:
          type: mtls  
    kafkaRest:
      tls:
        enabled: true
        secretRef: kafka-generated-jks
      authentication:
        type: mtls
        sslClientAuthentication: true

---
### CFK RestClass - THIS IS IMPORTANT FOR CFK TO CREATE INTERNAL ROLE BINDINGS
apiVersion: platform.confluent.io/v1beta1
kind: KafkaRestClass
metadata:
  name: default
  namespace: confluent
  labels:
    component: restclass
spec:
  kafkaClusterRef:
    name: kafka
    namespace: confluent
  kafkaRest:
    authentication:
      type: mtls
      sslClientAuthentication: true
    tls:
      secretRef: kafka-generated-jks

---
# Schema Registry
apiVersion: platform.confluent.io/v1beta1
kind: SchemaRegistry
metadata:
  name: schemaregistry
  namespace: confluent
  labels:
    component: sr
spec:  
  image:
    application: confluentinc/cp-schema-registry:7.8.0
    init: confluentinc/confluent-init-container:2.10.0
  replicas: 1
  tls:
    autoGeneratedCerts: true
  authentication:
    type: mtls
    mtls:
      sslClientAuthentication: requested
      principalMappingRules:
        - RULE:^CN=([a-zA-Z0-9.]*).*$/$1/L
  externalAccess:
    type: loadBalancer
    loadBalancer:
      domain: confluent.demo.com
      prefix: sr
  authorization:
    type: rbac
  dependencies:
    kafka:
      bootstrapEndpoint: kafka:9071
      tls:
        enabled: true
      authentication:
        type: mtls
    mds:
      endpoint: https://kafka.confluent.svc.cluster.local:8090
      tokenKeyPair:
        secretRef: mds-key-pair
      tls:
        enabled: true
      authentication:
        type: mtls
        sslClientAuthentication: true

---
# Kafka Connect
apiVersion: platform.confluent.io/v1beta1
kind: Connect
metadata:
  name: connect
  namespace: confluent
  labels:
    component: connect
spec:  
  image:
    application: confluentinc/cp-server-connect:7.8.0
    init: confluentinc/confluent-init-container:2.10.0
  replicas: 1
  build:
    type: onDemand
    onDemand:
      plugins:
        confluentHub:
          - name: kafka-connect-datagen
            owner: confluentinc
            version: 0.6.6
  tls:
    autoGeneratedCerts: true
  authentication:
    type: mtls
    mtls:
      sslClientAuthentication: requested
      principalMappingRules:
        - RULE:^CN=([a-zA-Z0-9.]*).*$/$1/L
  externalAccess:
    type: loadBalancer
    loadBalancer:  
      domain: confluent.demo.com
      prefix: connect
  authorization:
    type: rbac
  dependencies:
    kafka:
      bootstrapEndpoint: kafka:9071
      tls:
        enabled: true
      authentication:
        type: mtls
    mds:
      endpoint: https://kafka.confluent.svc.cluster.local:8090
      tokenKeyPair:
        secretRef: mds-key-pair
      tls:
        enabled: true
      authentication:
        type: mtls
        sslClientAuthentication: true
    schemaRegistry:
      url: https://schemaregistry.confluent.svc.cluster.local:8081
      tls:
        enabled: true
      authentication:
        type: mtls
        sslClientAuthentication: true

---
# ksqlDB
apiVersion: platform.confluent.io/v1beta1
kind: KsqlDB
metadata:
  name: ksqldb
  namespace: confluent
  labels:
    component: ksqldb
spec:
  image:
    application: confluentinc/cp-ksqldb-server:7.8.0
    init: confluentinc/confluent-init-container:2.10.0
  replicas: 1
  configOverrides:
    server:
      - "ksql.logging.processing.topic.auto.create=true"
      - "ksql.logging.processing.stream.auto.create=true"
  tls:
    autoGeneratedCerts: true
  dataVolumeCapacity: 50Gi
  authentication:
    type: mtls
    mtls:
      sslClientAuthentication: requested
      principalMappingRules:
        - RULE:^CN=([a-zA-Z0-9.]*).*$/$1/L
  externalAccess:
    type: loadBalancer
    loadBalancer:
      domain: confluent.demo.com
      prefix: ksqldb
  authorization:
    type: rbac
  dependencies:
    kafka:
      ## NEED TO USE SASL_SSL FOR KSQLDB
      bootstrapEndpoint: kafka.confluent.svc.cluster.local:9075
      tls:
        enabled: true
      authentication:
        type: mtls
        sslClientAuthentication: true
    mds:
      endpoint: https://kafka.confluent.svc.cluster.local:8090
      tokenKeyPair:
        secretRef: mds-key-pair
      tls:
        enabled: true
      # THIS IS DIFFERENT FROM THE OTHERS
      authentication:
        type: bearer
        bearer:
          secretRef: ksqldb-bearer
    schemaRegistry:
      url: https://schemaregistry.confluent.svc.cluster.local:8081
      tls:
        enabled: true
      authentication:
        type: mtls
        sslClientAuthentication: true

---
# Control Center
apiVersion: platform.confluent.io/v1beta1
kind: ControlCenter
metadata:
  name: controlcenter
  namespace: confluent
  labels:
    component: c3
spec:
  image:
    application: confluentinc/cp-enterprise-control-center:7.8.0
    init: confluentinc/confluent-init-container:2.10.0
  replicas: 1
  dataVolumeCapacity: 30Gi
  configOverrides:
    server:
      - "confluent.controlcenter.mode.enable=management"
  tls:
    autoGeneratedCerts: true  
  externalAccess:
    type: loadBalancer
    loadBalancer:
      domain: confluent.demo.com
      prefix: c3
  authorization:
    type: rbac
  dependencies:
    kafka:
      bootstrapEndpoint: kafka:9071
      tls:
        enabled: true
      authentication:
        type: mtls
    mds:
      endpoint: https://kafka.confluent.svc.cluster.local:8090
      tokenKeyPair:
        secretRef: mds-key-pair
      tls:
        enabled: true
      authentication:
        type: mtls
        sslClientAuthentication: true
    schemaRegistry:
      url: https://schemaregistry.confluent.svc.cluster.local:8081
      tls:
        enabled: true
      authentication:
        type: mtls
        sslClientAuthentication: true
    connect:
    - name: connect
      url: https://connect.confluent.svc.cluster.local:8083
      tls:
        enabled: true
      authentication:
        type: mtls
        sslClientAuthentication: true      
    ksqldb:
    - name: ksqldb
      url: https://ksqldb.confluent.svc.cluster.local:8088
      advertisedUrl: https://ksqldb.confluent.demo.com
      tls:
        enabled: true
      authentication:
        type: mtls
        sslClientAuthentication: false

# ---
# # Kafka Rest Proxy
# apiVersion: platform.confluent.io/v1beta1
# kind: KafkaRestProxy
# metadata:
#   name: kafkarestproxy
#   namespace: confluent
#   labels:
#     component: restproxy
# spec:
#   dependencies:
#     schemaRegistry:
#       url: http://schemaregistry.confluent.svc.cluster.local:8081
#   image:
#     application: confluentinc/cp-kafka-rest:7.8.0
#     init: confluentinc/confluent-init-container:2.10.0
#   tls:
#     autoGeneratedCerts: true
#   replicas: 1
#   externalAccess:
#     type: loadBalancer
#     loadBalancer:
#       domain: confluent.demo.com
#       prefix: restproxy
  